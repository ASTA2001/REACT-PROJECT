name: CICD - H&H ADs

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

    strategy:
      matrix:
        node-version: [14.18.1]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2

      # # Caching Yarn Dependencies
      # - name: Get yarn cache directory path
      #   id: yarn-cache-dir-path
      #   run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      # - name: Cache yarn dependencies
      #   uses: actions/cache@v2
      #   with:
      #     path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
      #     key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-yarn-

      # Create environment Files
      # - name: Create env records
      #   run: |
      #     touch .env
      #     touch yarn.lock
      #     echo REACT_APP_API=${{ secrets.ENV_REACT_APP_API }} >> .env
      #     echo APP_NAME=${{ secrets.ENV_APP_NAME }} >> .env
      #     echo APP_VERSION=${{ secrets.ENV_APP_VERSION}} >> .env
      #     echo APP_DESCRIPTION=${{ secrets.ENV_APP_DESCRIPTION }} >> .env
      #     echo SERVE_DOCS=${{ secrets.ENV_SERVE_DOCS }} >> .env
      #     echo SWAGGER_HOST=${{ secrets.ENV_SWAGGER_HOST }} >> .env
      #     echo SWAGGER_BASE_PATH=${{ secrets.ENV_SWAGGER_BASE_PATH}} >> .env
      #     echo CREATE_QUOTE_SECRET=${{ secrets.ENV_CREATE_QUOTE_SECRET}} >> .env
      #     cat .env

      # Run and Build
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - run: npm install
      - run: npm run build

      # Upload to s3 bucket and Invalidate Cloud Front
      - name: Deploy
        uses: reggionick/s3-deploy@v3
        with:
          # folder: build
          folder: build
          bucket: ${{ secrets.AWS_S3_BUCKET }}
          bucket-region: ${{ secrets.AWS_DEFAULT_REGION }}
          dist-id: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          invalidation: / *
          delete-removed: true
          no-cache: false
          private: true